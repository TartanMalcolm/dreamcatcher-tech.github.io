"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[8035],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return p}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),p=n,m=d["".concat(l,".").concat(p)]||d[p]||h[p]||o;return a?r.createElement(m,i(i({ref:t},u),{},{components:a})):r.createElement(m,i({ref:t},u))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},506:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return h}});var r=a(3117),n=a(102),o=(a(7294),a(3905)),i=["components"],s={},l="I11 Request-Idea",c={unversionedId:"Ideas/I11",id:"Ideas/I11",title:"I11 Request-Idea",description:"Target",source:"@site/nfas/Ideas/I11.md",sourceDirName:"Ideas",slug:"/Ideas/I11",permalink:"/nfas/Ideas/I11",editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/nfas/Ideas/I11.md",tags:[],version:"current",frontMatter:{},sidebar:"nfas",previous:{title:"I07 Web Liquidity Pooling",permalink:"/nfas/Ideas/I07"},next:{title:"Immutable Permissioning",permalink:"/nfas/Drafts/Immutable Permissioning"}},u={},h=[{value:"Target",id:"target",level:2},{value:"Proposal Scope",id:"proposal-scope",level:2},{value:"Restrictions on Request Scope",id:"restrictions-on-request-scope",level:3},{value:"Proposed Approach",id:"proposed-approach",level:2},{value:"Proposed Output",id:"proposed-output",level:2}],d={toc:h};function p(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"i11-request-idea"},"I11 Request-Idea"),(0,o.kt)("h2",{id:"target"},"Target"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/blob/master/website/nfas/Requests/R10.md"},"R10")," - Request-Idea."),(0,o.kt)("h2",{id:"proposal-scope"},"Proposal Scope"),(0,o.kt)("p",null,"This idea references the request at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/blob/master/website/nfas/Requests/R10.md"},"R10")," and is intended to meet all points except those excluded below."),(0,o.kt)("h3",{id:"restrictions-on-request-scope"},"Restrictions on Request Scope"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"This Idea does not meet the Request tactical intent of gathering the general app ideas we have and put them into that format. It's only proposing that we get R10/I11 into lock, then run one other Request through to Request/Idea lock."),(0,o.kt)("li",{parentName:"ol"},"It's not intended to test all edge cases as that would be too timeconsuming a task. Instead it aims to test just one - least effort.")),(0,o.kt)("h2",{id:"proposed-approach"},"Proposed Approach"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"As we're bootstrapping here, this Idea and the Request should be iterated with a QA standard. I.e. the QA Standard (consisting of the temapltes for Requests and Ideas that QA to the DC Pool requires), should be drawn up in tandem with the Request/Idea itself.)"),(0,o.kt)("li",{parentName:"ol"},"The first step is to create the Request/Idea pair of docs, and agree that it holds the information that DC Pool QA requires."),(0,o.kt)("li",{parentName:"ol"},"Following that, create and agree a guidance document that states the QA Requirements for submitting Requsts/Ideas to the DC Pool."),(0,o.kt)("li",{parentName:"ol"},"As part of the QA for that output, perform a check against the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/blob/master/website/docs/Dreamcatcher%20Charter.md"},"Dreamcatcher Charter"),"."),(0,o.kt)("li",{parentName:"ol"},"For edge cases, we should look at what the least amount of information needed to gain DC Pool approval is. A strawman may be useful here, but what we're really doing is testing whether the QA guidance could be picked up by another and executed (noting that it's going to be the two of us.)"),(0,o.kt)("li",{parentName:"ol"},"At the creation of the initial docs in each stage, create the NFT, then track the effort against each NFT."),(0,o.kt)("li",{parentName:"ol"},"Finally, with this Idea implemented, run one other Request through it, gain lock with an Idea, and admit it to the DC Pool. That's the 'Done' test.")),(0,o.kt)("p",null,"Note that we're explicitly not including the Contract stage for now. There may be value in generating a Contract stub, but TBD. More likely is that we'll be beyond the NFT md stage before that becomes a consideration."),(0,o.kt)("h2",{id:"proposed-output"},"Proposed Output"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A process diagram and guidance doc that shows how Requests and Ideas interact, with the aim of being either submitted to the DC Pool for QA."),(0,o.kt)("li",{parentName:"ol"},"R10 Request/Idea.md signed off as holding the appropriate information that DC Pool requires."),(0,o.kt)("li",{parentName:"ol"},"I11.md (this doc) signed off similarly."),(0,o.kt)("li",{parentName:"ol"},"A guidance doc (templates and some wording around what's expected), laying out what the DC QA requirements are. Trivially in this case, the DC QA Authority will be writing these."),(0,o.kt)("li",{parentName:"ol"},"Once in lock, the DC Pool being updated to reflect that this Idea is in production."),(0,o.kt)("li",{parentName:"ol"},"One other Request and an Idea that aims to meet that Request that meets the QA requirements.")))}p.isMDXComponent=!0}}]);