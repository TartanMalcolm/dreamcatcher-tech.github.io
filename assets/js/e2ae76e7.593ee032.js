"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[1540],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),f=l(n),u=o,m=f["".concat(s,".").concat(u)]||f[u]||p[u]||a;return n?r.createElement(m,i(i({ref:t},h),{},{components:n})):r.createElement(m,i({ref:t},h))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9345:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return h},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={},s=void 0,l={unversionedId:"Dictionary_Conventions",id:"Dictionary_Conventions",title:"Dictionary_Conventions",description:"1. Titles of Dictionaries are denoted in all-caps. E.g.",source:"@site/docs/Dictionary_Conventions.md",sourceDirName:".",slug:"/Dictionary_Conventions",permalink:"/docs/Dictionary_Conventions",editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/docs/Dictionary_Conventions.md",tags:[],version:"current",frontMatter:{}},h=[],p={toc:h};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Titles of Dictionaries are denoted in all-caps. E.g."),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The Dictionary is hierarchical in nature. That is, one Dictionary can be extended by another, while inheriting the definitions of the first. The relationship is:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER OS (or DOS for short) DICTIONARY"),(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER ARCHITECTURE DICTIONARY"),(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY")))),(0,a.kt)("p",null,"A word Capitalised and in Italics refers to a defined term with its own Dictionary entry.\nA defined term can be followed by a type, in parentheses. The list of valid types is as follows:\nObject\nField\nEvent\nSelection\nLink\nWorkflow\nTypeof\nCovenant - logic in the blockchain system\nStructure conventions:\nObject - denoted in the structure as: Objectname/\nChild - denoted in the structure as an object on a new line nested in by one tab from the object above it.\nField - denoted as: ?fieldname: fieldvalue\nLink to another Project\u2019s Object: name -> ObjectLocation\nLink in another Project that refers to this Project\u2019s Object: name <- otherProjectsLink\nWeak Link to another Project\u2019s Object: name ~> ObjectLocation\nFork of an Object: name <# ObjectLocation which reads as \u201cname is a Fork of ObjectLocation\u201d\nTo indicate where another Object is a fork of this one, the format is name #> ObjectLocation, where ObjectLocation is a Fork of name.\nData in the structure that is auto-generated from an algo: (generatedFromAlgo)\nBranches of Projects are denoted by: ","[governanceName$/]","projectName","[@forkName]",".\nprojectName@branchName denotes a Branch which has the same Governance as the Origin.",(0,a.kt)("br",{parentName:"p"}),"\n","governanceName:projectName@branchName denotes a Branch which has different governance from the Origin.\nSpecific blocks within an Object\u2019s chain are denoted by: Objectname#blockNumber. Objectname can be a full path or abbreviated for example.\nThe top level of a Sovereign Object is denoted by Project1:/",(0,a.kt)("br",{parentName:"p"}),"\n","A Project which has not yet been Birthed is denoted by Project1/ This is a shorthand for the location of the Object within a hierarchy. E.g. DOSInstance:/Apps/Dreamcatcher/Projects/Project1/ can be shortened to Project1/\nA term which refers to another location in the Dictionary is denoted by square brackets, e.g.:\nAttribution Algorithm ","[See Attribution ALGO DICTIONARY]"))}f.isMDXComponent=!0}}]);