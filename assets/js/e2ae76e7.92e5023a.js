"use strict";(self.webpackChunk_dreamcatcher_tech_dreamcatcher_website=self.webpackChunk_dreamcatcher_tech_dreamcatcher_website||[]).push([[1540],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),h=s(n),d=o,u=h["".concat(l,".").concat(d)]||h[d]||m[d]||a;return n?r.createElement(u,i(i({ref:t},p),{},{components:n})):r.createElement(u,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9345:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],c={id:"Dictionary_Conventions",title:"Dictionary Conventions",sidebar_label:"Dictionary Conventions"},l=void 0,s={unversionedId:"Dictionary_Conventions",id:"Dictionary_Conventions",title:"Dictionary Conventions",description:"1. Titles of Dictionaries are denoted in all-caps. E.g.",source:"@site/docs/Dictionary_Conventions.md",sourceDirName:".",slug:"/Dictionary_Conventions",permalink:"/docs/Dictionary_Conventions",editUrl:"https://github.com/dreamcatcher-tech/dreamcatcher-tech.github.io/edit/master/website/docs/Dictionary_Conventions.md",tags:[],version:"current",frontMatter:{id:"Dictionary_Conventions",title:"Dictionary Conventions",sidebar_label:"Dictionary Conventions"},sidebar:"docs",previous:{title:"Modules",permalink:"/docs/DPL/Modules"},next:{title:"Ambient Attribution",permalink:"/docs/User_Dictionary/Ambient Attribution"}},p={},m=[],h={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Titles of Dictionaries are denoted in all-caps. E.g."),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The Dictionary is hierarchical in nature. That is, one Dictionary can be extended by another, while inheriting the definitions of the first. The relationship is:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER OS (or DOS for short) DICTIONARY"),(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER ARCHITECTURE DICTIONARY"),(0,a.kt)("li",{parentName:"ol"},"DREAMCATCHER USER DICTIONARY"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A word Capitalised and in Italics refers to a defined term with its own Dictionary entry.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A defined term can be followed by a type, in parentheses. The list of valid types is as follows:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Object"),(0,a.kt)("li",{parentName:"ol"},"Field"),(0,a.kt)("li",{parentName:"ol"},"Event"),(0,a.kt)("li",{parentName:"ol"},"Selection"),(0,a.kt)("li",{parentName:"ol"},"Link"),(0,a.kt)("li",{parentName:"ol"},"Workflow"),(0,a.kt)("li",{parentName:"ol"},"Typeof"),(0,a.kt)("li",{parentName:"ol"},"Covenant - logic in the blockchain system"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Structure conventions:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Object - denoted in the structure as: Objectname/"),(0,a.kt)("li",{parentName:"ol"},"Child - denoted in the structure as an object on a new line nested in by one tab from the object above it."),(0,a.kt)("li",{parentName:"ol"},"Field - denoted as: ?fieldname: fieldvalue"),(0,a.kt)("li",{parentName:"ol"},"Link to another Project\u2019s Object: name -> ObjectLocation"),(0,a.kt)("li",{parentName:"ol"},"Link in another Project that refers to this Project\u2019s Object: name <- otherProjectsLink"),(0,a.kt)("li",{parentName:"ol"},"Weak Link to another Project\u2019s Object: name ~> ObjectLocation"),(0,a.kt)("li",{parentName:"ol"},"Fork of an Object: name <# ObjectLocation which reads as \u201cname is a Fork of ObjectLocation\u201d"),(0,a.kt)("li",{parentName:"ol"},"To indicate where another Object is a fork of this one, the format is name #> ObjectLocation, where ObjectLocation is a Fork of name."),(0,a.kt)("li",{parentName:"ol"},"Data in the structure that is auto-generated from an algo: (generatedFromAlgo)"),(0,a.kt)("li",{parentName:"ol"},"Branches of Projects are denoted by: ","[governanceName$/]","projectName","[@forkName]","."),(0,a.kt)("li",{parentName:"ol"},"projectName@branchName denotes a Branch which has the same Governance as the Origin."),(0,a.kt)("li",{parentName:"ol"},"governanceName:projectName@branchName denotes a Branch which has different governance from the Origin."),(0,a.kt)("li",{parentName:"ol"},"Specific blocks within an Object\u2019s chain are denoted by: Objectname#blockNumber. Objectname can be a full path or abbreviated for example."),(0,a.kt)("li",{parentName:"ol"},"The top level of a Sovereign Object is denoted by Project1:/"),(0,a.kt)("li",{parentName:"ol"},"A Project which has not yet been Birthed is denoted by Project1/ This is a shorthand for the location of the Object within a hierarchy. E.g. DOSInstance:/Apps/Dreamcatcher/Projects/Project1/ can be shortened to Project1/"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A term which refers to another location in the Dictionary is denoted by square brackets, e.g.:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Attribution Algorithm ","[See Attribution ALGO DICTIONARY]")))))}d.isMDXComponent=!0}}]);