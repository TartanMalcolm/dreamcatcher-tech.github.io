<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Dreamcatcher Blog</title>
        <link>https://dreamcatcher.land/blog</link>
        <description>Dreamcatcher Blog</description>
        <lastBuildDate>Thu, 18 Mar 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Inverted Applications]]></title>
            <link>https://dreamcatcher.land/blog/2021/03/18/inverted-applications</link>
            <guid>/2021/03/18/inverted-applications</guid>
            <pubDate>Thu, 18 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="2021-03-18-assets/inverted_applications.jpg"/></p><p>Distributed apps at best can have tamper detection.</p><p>Decentralized apps at best can have censor resistance.</p><p>Consider then a github clone with a central token. Once roughly 51% of all the governance tokens have been controlled, which could be done by censoring maybe three or four people if not distributed well, then the entire app is at the will of the censor. Worse, perhaps the underlying blockchain is overthrown somehow - then the github token goes down as collateral (excuse the pun) damage. The problem is confounded by the requirement that surviving blockchain operators need to communicate with each other, as forking is considered a system failure. This repeated communication makes them easy targets. Yes, the system could start again as soon as the first copy re-appears and starts operating, but during that window the censor is in control - supression is the norm.</p><p>An inverted version of github makes its own dedicated set of blockchains for each git repo that anyone wishes to host. These apps might communicate with each other, and might even trade using some currency selections. They might share block producers, they might not.</p><p>To take down an inverted app requires finding all the blockhosts and all the key owners of all the github repos that every get created using this means of operation. The problem is far thornier than the other classes of apps. We believe this is censorship proof operation - if a censor can find every actor who is running a copy of the software. Whole subsegments of user can go offnet, and run local only. You can only supress what you can detect, and so this is the worst possible scenario of any censorship effort - we should strive for this, and not accept inferior systems that offer anything less that censorship proof apps for everyday users.</p><p>Email is an example of a sort of inverted app. It has massive distribution, it is not centrally controlled. The central control however, is exerted by the DNS namespace, and the IP allocation tables of the internet. but it has many of the characteristics, and its wild spread indicates the scale for these types of apps. It could be that email is the simplest form of such a thing, as it really just does transmission and receiving. More complex and more useful interactions such as long form stateful collaborations have yet to see such an exlosion, but git offers a glimpse of what that could be like. If only git came with its own independent version of github wrapped around every repo that was created. Its components lack the resilience and internal integrity necessary to travel thru many inverted instances unaltered.</p><p>The first inverted app is the dreamcatcher. Each idea is free floating, owned by its creator and optionally private. Then projects are created - themselves a form of idea - to capture these ideas, seek missing ideas, and refine them into something usable. Each project is entirely sovereign to itself, optionally run by whomever has compute capacity to do so. It is completely free of any centralized token control, system control, or even version control. It can, at the freewill of its owners, communicate with other organisms such as itself, or with other external systems such as email.</p><p>The spreading of a codebase creates a desire for future improvements to that program. This is primarily how we get paid, and the service we are offering - future improvements quickly, of quality. The more people get copies of our software, the more pressure is created.</p><p>The power of enduring social pressure. The emergent will of a thousand whispers.</p><p>Inverted apps put their consumer first, and coordinate while being fractured into many pieces. inverted apps harness the inverted capital allocation mechanisms enabled by dreamcatchers to perform functions in line with the benefit of their consumers, not their controllers. Distributed apps spread the operation of an application across multiple physical machines with control held by a central entity. Almost all cloud applications that hope to offer any kind of reliability operate in this way. Decentralized apps are distributed apps that spread the central control amongst many entities, often dynamically. Whilst the control may be spread around, the central control is still fiercely present, usually in the form of a token as a central registry of intent. Inverted apps are the opposite of these forms, in that there is no central coordination of intent, but rather any central tendencies emerges, without force or registration, and are apparent when entities communicate. For example, the collection of all bitcoin chain forks is a crude form of inverted app - the forks do not communicate well with each other, but their central token registries are at least partially split from each other to serve the needs of their respective user groups, and sometimes they coordinate via exchanges where overall, the utility of cryptocurrencies of this class is enhanced. Inverted apps can easily wrap controlled apps, but controlled apps are incapable of wrapping inverted. Inverted can wrap inverted. Inverted can emulate controlled where needed. Almost all blockchains could currently be classed as perverted apps - proporting to offer freedom, but really having no more structure than a public company with central product and distributed public shareholdings. These operations have no future.</p><p>an inverted exchange is different to an exchange on a blockchain. True inversion means that any partipant can come and go if the possess commodity electronics. Ethereum for example you need to have ETH, then you need assets on the chain - the list of barriers goes on and on. An inverted exchange would let people peer with one another and find the best prices. Yes there would appear aggregators, but these would be assistants, and easily replaced at any time they stop being useful.</p><p><img src="./2021-03-18-assets/no-more-software.png" alt="No SaaS"/></p><p>A new software delivery model for SaaS is <a href="https://goteleport.com/blog/open-core-vs-saas-intro/">emerging</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Inverted Cloud]]></title>
            <link>https://dreamcatcher.land/blog/2021/02/22/inverted-cloud</link>
            <guid>/2021/02/22/inverted-cloud</guid>
            <pubDate>Mon, 22 Feb 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="2021-02-22-assets/cloud-at-home.jpg"/></p><p>&quot;AMD Silicon&quot; covers wide range too:</p><ol><li>circuit designers</li><li>silicon fab</li><li>supply chain</li></ol><p>Our applications must be easily portable to this mode of operation</p><p>Need to move to open silicon, with trusted fabs</p><p>If cloud@home then the workload is rapidly relocatable, and so the customer may choose to run some base load on prem, have other load on cloud@home, and sell their spare capacity on cloud@home</p><p>cloud@home makes use of idle resources, and shares yours out too. you can have enough resiliency for standalone operation in a disaster, but can rent this capacity out when not in use</p><p>Show diagram of comparitive trust chains, latency, cost, fault tolerance of cloud configurations</p><p><a href="https://www.theregister.com/2020/07/14/google_amd_secure_vm/">https://www.theregister.com/2020/07/14/google_amd_secure_vm/</a>
So your chain of trust can now be as short as &quot;AMD silicon&quot;, Which paves the way for cloud at home type scenarios where renting off a home supplier has the same security guarantees as renting off a cloud supplier</p><p>event driven workloads designed for distributed storage - so the workloads would have to be designed specifically for cloud@home unless its just small little apps</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ambient Attribution]]></title>
            <link>https://dreamcatcher.land/blog/2020/12/20/ambient-attribution</link>
            <guid>/2020/12/20/ambient-attribution</guid>
            <pubDate>Sun, 20 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[k]]></description>
            <content:encoded><![CDATA[<p><em>&quot;Mirror mirror, on the wall, who is the fairest of them all?&quot;</em></p><p>Contents</p><ol><li>Example project funding of Interblock</li><li>Example project funding of DOS</li></ol><p>Software companies make up trillions of dollars on the stockmarket, but the best
quality software is actually free - how can we connect these two extremes to
something more sustainable, and how can we get more software, of a higher
quality, faster, and cost lest money ?</p><p>The utopian model of knowledge work is that all individuals permissionlessly contribute to whatever they are able, in whatever form they can, and can build on all prior contributions from anyone else, while receiving fair recompense based on the value they provided whenever their work is used and reused, all with zero overhead. This utopia is focused on providing pure utility to consumers, and enabling pure contribution from producers. This environment would be ideal Ambient Attribution.</p><p>To implement such perfection in our current reality needs compromise and ingenuity. A pragmatic form of Ambient Attribution as presented here has mechanisms to handle corruption, fairness discovery, attack mitigation (eg: lawsuits and corporation pressures), dishonesty, disputes, transaction costs, and management overheads, all while avoiding the perils of central system control. Whilst the perfected version may be some decades away technologically, we see within the rise of blockchains, the basic components required to implement a first iteration. This is what we set out to embody within the Dreamcatcher.</p><p>Based on two forces:</p><ol><li>fair credit due everywhere</li><li>zero friction for reuse</li></ol><p><img src="./2020-12-20-assets/good-fast-cheap.jpg" alt="Iron Triangle of Time vs Cost vs Quality"/></p><p>These qualities change the bigger the pool gets <!-- -->[graphic of pool size vs ideal
match]<!-- --> Biggest pool is the lowest friction quality largely depends on the people
you have available. let us assume their is an optimal piece of work, at an
optimal price. the more people can do the work the better. less friction, zero
friction company. zero liability, zero friction, never credit. credit being
given by the worker, acting as a bank. <!-- -->[graph showing decreasing overall cost]</p><p><a href="./2020-12-20-assets/sweat-equity.jpg"><img src="/blog/2020-12-20-assets/sweat-equity.jpg" height="480"/></a></p><p>decreasing activation cost longer it survives, the better the quality a good
programmer on their day public scrutiny, even if perceived can be called to
account years after your coding</p><p>how much reward is fair ? surmise there is a single fair answer. self witness,
shared witness, unto others as they unto you, wisdom of crowds image should be
the same looking back, no different. how they see you should be same as how you
see them. this is shared vision - aka reality. fairness is something that looks
the same from all sides</p><p>What is fair payment ? Depend on each situation. Depends on the utility gained.</p><h2>Example: Funding Interblock</h2><p>What is the prize ?</p><h3>What is the product ?</h3><p>Equity stake in the upside. Consumers of the product are politly asked for fair
payment</p><p>Types of input:</p><ol><li>Direct funds used by project command</li><li>Code contribution</li><li>Direct funded code contribution</li><li>Early customer</li></ol><p>We hope these models of labour, if successful, can have equivalents in the
physical product world.</p><h2>Restrictions on investment</h2><p>Any projects that we endorse must follow the following rules, which are
automated:</p><ol><li>Investors must prove they know what the project is about</li><li>Investors must be able to afford to lose their investment</li><li>Projects must have an earnest goal</li></ol><p>We are unable to register many of our projects with the SEC due to our
requirements to stay anonymous. However we support the spirit of the SEC
regulations, and we aim to exceed their intention.</p><p>To invest in a software project, you must have made a code commit of more than x
weighted value, which signals that you know what the project is about, and you
have contributed enough to be part of the enterprise - a worker, as it were -
relying on the efforts of others and yourself to show return.</p><p>Work cannot be faked, copied, or otherwise, and it makes no difference to its
utility if it was done by a machine, a person, or a small dog. It doesn&#x27;t matter
if it was done in a virtual machine, bare metal, at gunpoint, or of freewill -
it is like gold - it can be tested for purity, and not counterfeited, unlike
fiat, and unlike promises, which is what fiat is.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Side Effect IO]]></title>
            <link>https://dreamcatcher.land/blog/2020/10/26/side-effects</link>
            <guid>/2020/10/26/side-effects</guid>
            <pubDate>Mon, 26 Oct 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>&quot;Mixing the pure with the impure, without making everything impure&quot;</em></p><p><img src="2020-10-26-assets/mixing-droplet.jpg"/></p><p>The work I have been doing lately could largely be described as side effect management. This is the means by which to introduce external data into the blockchain based system, in a way that does not corrupt the key blockchain property of reproducibility. That is to say, being able to rerun blocks thru different computers and verify that the same answer came out. Side effects are any external event - something that cannot be reproduced - a simple example is receiving an email. The converse is required too - being able to use the pure, clean, secure blockchain based calculations to trigger unreproducible external events. A simple example of this is sending an email.</p><p>So the work is about making something unrepeatable become something repeatable in a clean way, and to a lesser extent making something repeatable trigger unrepeatable events.</p><p>However during the work I was doing to send internet packets between Amazon and the browser the amount of code I was writing that was not blockchain related started to increase. The problem with this is that it is not reusing the code that is used for the blockchains, and so requires extra work to build and maintain, while losing the very helpful traceability properties that blockchain based calculations afford. Traceability becomes especially useful when the software is executing on remote servers.</p><p>This was the trigger for the work, but it is work that would have been required later anyway.</p><p>I have managed to get the underlying system of side effects working in prototype form, and starting from this morning I will be applying that to the internet transport ability. I am pleased with how the system is performing, and it meets my goals of being clean and simple and easy to fault find. An example of why the fault finding aspect is useful is that if you call me and say that at roughly 10am something weird happened in the app and you can&#x27;t seem to make it happen again, we would be able to see the actual interactions the application made and very quickly be able to reproduce the problem, making fixing it much faster, and giving you reassurance that we did actually know what is going on, rather than having to ask you to keep an eye out for it happening again because we can&#x27;t notice anything amiss.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zero Liability Companies]]></title>
            <link>https://dreamcatcher.land/blog/2020/09/24/zero-liability-co</link>
            <guid>/2020/09/24/zero-liability-co</guid>
            <pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[When was it first invented]]></description>
            <content:encoded><![CDATA[<p><img src="2020-09-24-assets/dragon.jpg"/></p><p>When was it first invented</p><p>But the only truly zero liability company is a fully anonymous one.</p><p>Building customer trust</p><p>The only way to protect the privacy of your customers is to ensure they remain anoymous.</p><p><img src="2020-09-24-assets/economy.png" alt="Current Labour Flows"/></p><p>Switching cost for customers is high, so they will tolerate erosion of value before switching. Also company 1 and the livelihoods of all their staff are destroyed by a mass switch, when perhaps the majority of the company did good work. Then the process repeats again for company 2.</p><p>We propose a means by which there is really only one company, and the members cooperate at whim, and the consumers pay down whichever paths suit them best.</p><h3>Outsourcing your identity management requirements.</h3><p>In such an ecosystem, the dangerous job of correlating identities need only be managed by a handful of services.</p><h3>Exceeding quality of registered companies</h3><p>Companies do bad things all the time. Clearly being registered is no guarantee of good behaviour. With zero liability, the responsibily shifts onto the community to maintain opinion... This correlates with a shift in social mob justice of suspected bad actors.</p><p>Complete anonymity and business models that still work (hopefully!) even tho buy side and sell side do not know who each other are.</p><p>Making a functioning revenue stream when there is no force available - how to make money from open source software.</p><p>Transparency of companies is somewhat like how on a unix system, the operating system is largely readable by all users, but only writable by a trusted few. It helps the users to know whats going on.</p><p>We only care about the work generated. Work is hard, and full of thorns as the level of detail increases. Being zero liability and anonymous frees people to focus solely on the work, and frees consumers to look only at the value of that work to them, independent of any other forces that can alter perception away from cold purity of value. It is then up to the producer to choose to declare what they have done - this is optional, whereas under the current systems it is required, and criminally punished.</p><p>Moreover, we have implemented ways in which people can partially declare properties about themselves and their work rather than a full destruction of privacy. For example you can declare yourself a tax resident of x country for the projects you contributed there, and you can pay tax to that country, but you need not assosciate your name with it.</p><p>The bringers of novel knowledge are often unwelcomed, some violently so (references). For this reason, the Dreamcatcher network is designed such that any contributors of work or funds are free to stay anonymous, and at their wish only reveal as much as they wish. They can also release graduated information rather than all or nothing. Indeed consumers within the network also can operate this way, and share any portion of their consumption data on the network</p><h2>Operating Activities</h2><ol><li>Real life promotion (conferences, videos, friends)</li><li>Online Promotion (forums, emails, blogs)</li><li>Code commits</li><li>Issue posting</li><li>TESTING Amazon deployments using serverless.com tooling</li><li>PRODUCTION Amazon deployments using serverless.com tooling</li></ol><p>the concept of the zero liability company only the code matters</p>]]></content:encoded>
        </item>
    </channel>
</rss>